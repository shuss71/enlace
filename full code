** edits to make: stop button is buggy, doesn't work. add help page in spanish

# fully functioning code

import tkinter as tk # GUI (graphical user interface) used for python
from tkinter import messagebox # view-only textbox for translation page

selected_language = None # initalizes variable

# sets language to selected value
def select_language(language):
    global selected_language  
    selected_language.set(language)
    print(f"Selected Language: {selected_language.get()}")  # debugging output

# initializing main window with all UI elements
def show_homepage():
    global root, selected_language, warning_label, logo_image

    root = tk.Tk()
    root.title("ENLACE")
    root.geometry("960x576")  # window size for the 10.1 inch screen
    root.configure(bg="beige") # background color

    selected_language = tk.StringVar(value="")
    logo_image = tk.PhotoImage(file="logo.png")  

    # creating UI elements (ENLACE logo label, welcome label)
    logo_label = tk.Label(root, image=logo_image, bg="beige")
    logo_label.pack(pady=20)  # adding space below logo
    
    welcome_label = tk.Label(root, text="WELCOME!", font=("Arial", 30, "bold", "italic"), bg="beige", fg="black")
    welcome_label.place(relx=0.5, rely=0.2, anchor="center")  # Adjusted position for upper center

    logo_image = tk.PhotoImage(file="logo.png")  # Update with the correct logo path
    logo_label = tk.Label(root, image=logo_image, bg="beige")
    logo_label.image = logo_image  # To prevent garbage collection of the image
    logo_label.pack(pady=20)

    enlace_label = tk.Label(root, text="ENLACE\nreal-time translation", font=("Arial", 24, "bold", "italic"), bg="beige", fg="black")
    enlace_label.pack()

    button_frame = tk.Frame(root, bg="beige")  # frame to hold the buttons on the same line
    spanish_button = tk.Button(button_frame, text="Spanish to English", font=("Arial", 12), command=lambda: select_language("spanish_to_english"), width=20, height=2)
    english_button = tk.Button(button_frame, text="English to Spanish", font=("Arial", 12), command=lambda: select_language("english_to_spanish"), width=20, height=2)
    spanish_button.pack(side="left", padx=10)  # pack buttons side by side with space between them
    english_button.pack(side="left", padx=10)
    button_frame.pack(pady=20)

    # warning label to show if no language is selected
    warning_label = tk.Label(root, text="", fg="red", bg="beige")
    warning_label.pack(pady=10)

    # next button
    next_button = tk.Button(root, text="Next", font=("Arial", 16, "bold"), bg="white", fg="black", command=go_to_next_page, width=10, height=2)
    next_button.place(relx=0.5, rely=0.9, anchor="center")  # adjusted coordinates for the "Next" button

    root.mainloop()

# next page once language is selected 
def go_to_next_page():
    global selected_language, warning_label  
    if selected_language.get():  
        root.destroy() 
        show_translation_page() 
    else:
        warning_label.config(text="Please select a language", fg="red")

# initializing translation window with all UI elements
def show_translation_page():
    # initialize the translation window
    translation_window = tk.Tk()
    translation_window.title("ENLACE Translation")
    translation_window.geometry("1024x600")
    translation_window.config(bg="beige") 

    # "Ready to Start?" label
    ready_label = tk.Label(translation_window, text="     Ready to Start?     ", font=("Arial", 24, "bold", "italic"))
    ready_label.place(relx=0.5, rely=0.15, anchor="center")

    # view-only textbox for translation output
    translation_box = tk.Text(translation_window, height=15, width=75, state=tk.DISABLED, wrap=tk.WORD, font=("Arial", 14))
    translation_box.place(relx=0.5, rely=0.5, anchor="center")
    
    def update_translation_box(text):
        translation_box.config(state=tk.NORMAL)
        translation_box.insert(tk.END, text + "\n")
        translation_box.config(state=tk.DISABLED)

    def start_translation():
        update_translation_box("Translating...")  

    def stop_translation():
        update_translation_box("Translation Stopped\n")

    def go_to_homepage():
        translation_window.destroy()
        show_homepage()
    
    start_button = tk.Button(translation_window, text="Start", command=start_translation, font=("Arial", 16, "bold"), fg="black", padx=20, pady=15)  # Increased padding
    start_button.place(relx=0.8, rely=0.9, anchor="se")  

    stop_button = tk.Button(translation_window, text="Stop", command=stop_translation, font=("Arial", 16, "bold"), fg="black", padx=20, pady=15)  # Increased padding
    stop_button.place(relx=0.2, rely=0.9, anchor="sw") 

    # arrow button to go back to the homepage
    arrow_button = tk.Button(translation_window, text="<", font=("Arial", 20), command=go_to_homepage)
    arrow_button.place(relx=0.05, rely=0.05, anchor="nw")
    
    # help button to go to help page
    help_button = tk.Button(translation_window, text="Help", font=("Arial", 16), command=show_help_page)
    help_button.place(relx=0.95, rely=0.05, anchor="ne")

    translation_window.mainloop()
    translation_window.destroy()  # Close the translation window
    show_homepage()  # Show the homepage

def show_help_page():
    # Initialize the help window
    help_window = tk.Tk()
    help_window.title("Help and Instructions")
    help_window.geometry("960x576")
    help_window.config(bg="beige") 

    # title label
    help_title = tk.Label(help_window, text="Help Page", font=("Tahoma ", 20, "bold", "italic"))
    help_title.pack(pady=50)

    # instructions text box
    help_text = """

                                                                        Instructions:

                    1. Select a translation (Spanish to English or English to Spanish),
                        then press the "Next" button to go to the translation page.
                    2. Press "Start" to begin listening for audio and displaying translations.
                    3. Press "Stop" to pause or end the session.
                    4. Use the back arrow to return to the homepage or previous screens.
                    5. Ensure the microphone is properly connected to the device for smooth 
                        and accurate translations.
            
            If you encounter further issues, please restart the device or check the microphone connection."""

    # formatting the help box
    help_box = tk.Text(help_window, wrap=tk.WORD, font=("Tahoma ", 14), width=80, height=15)
    help_box.insert(tk.END, help_text)
    help_box.config(state=tk.DISABLED)
    help_box.pack(padx=10, pady=10)

    def go_back_to_translation():
        help_window.destroy()
        show_translation_page()

    back_arrow = tk.Button(help_window, text="←", font=("Arial", 20), command=go_back_to_translation)
    back_arrow.place(relx=0.05, rely=0.05, anchor="nw")

    # running the help window
    help_window.mainloop()

# starting the application by running the homepage
if __name__ == "__main__":
    show_homepage()
